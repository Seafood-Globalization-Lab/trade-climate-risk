mutate(eez_name = countrycode(country, origin = 'country.name', destination = 'iso3c')) %>%
distinct(eez_name) %>%
summarize(length = length(eez_name)) %>%
pull(length)
print(paste0("Number of countries joined to ", data, ": ", as.character(num_countries)))
# Data coverage:
num_species_artis <- sum(str_detect(
unique(consumption_sciname$sciname_joinable_to_fishbase), " "), na.rm = TRUE)
num_species_fishbase <- artis_fishbase_locations %>%
summarize(unique_species = length(unique(Species))) %>%
pull(unique_species)
species_coverage_pct <- round((num_species_fishbase / num_species_artis), 2) * 100
# 81% % coverage of all ARTIS species in fishbase - also try sealifebase?
print(paste0("Number of species in ", sym(data), ": ", num_species_fishbase))
print(paste0("Number of species in ARTIS", ": ", num_species_artis))
print(paste0("Percent of ARTIS species that ", sym(data), " has: ", as.character(species_coverage_pct),"%"))
}
else {
# Which countries species are found in (using country() distribution data)
fishbase_country_presences <- artis_fishbase_locations %>%
filter(Status %in% c("native", "Native", "introduced", "endemic")) %>%
mutate(eez_name = countrycode(country, origin = 'country.name', destination = 'iso3c')) %>%
group_by(Species) %>%
summarize(countries_found = paste0(unique(eez_name), collapse = ",")) %>%
rename(sciname_joinable_to_fishbase = "Species") %>%
mutate(source = data)
consumption_countries_joined <- left_join(consumption_sciname, fishbase_country_presences, by = "sciname_joinable_to_fishbase")
#
# Determine whether a species is present or absent in an EEZ
consumption_countries_joined <- consumption_countries_joined %>%
ungroup() %>%
mutate(presence_or_absence = case_when(
str_detect(countries_found, eez_iso3c) ~ 1,!str_detect(countries_found, eez_iso3c) ~ 0,
TRUE ~ NA
))
return(consumption_countries_joined)
}
}
# Save dataframe
# Get list of files for future projections on EACH species
file_names <- list.files(path = "../data/species/", pattern = "\\.csv", full.names = TRUE)
# Obtain species lookup key (will be used in loop join)
species_names <- fread("../data/dbem_spp_list.csv")
# Read in eez lat long extents (use to identify eez territories by species distribution in fishbase)
eez_extents <- fread("../data/eez_lat_long_extents.csv")
# initiate empty df
df <- data.frame()
for (i in 1:length(file_names)) {
# Read in i'th species file in loop
df_i <- fread(file_names[i])
# rename species variable to taxon_key to a join can work
df_i <- df_i %>%
rename(taxon_key = "species")
df_i <- left_join(df_i, species_names, by = "taxon_key")
# Select only certain variables for certain years and pivot wider
df_i <- df_i %>%
filter(year %in% c(2030, 2050, 2100)) %>%
mutate(year_ssp = paste0(year, ssp), sciname = tolower(paste(genus, species))) %>%
select(sciname, eez_name, year_ssp, mean_per_change) %>%
pivot_wider(names_from = year_ssp, values_from = mean_per_change)
# Combine all species observations into one file
df <- df %>%
bind_rows(df_i)
}
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
# Convert eez variable countries to iso3c codes
for (i in 1:length(df$eez_name)) {
df$eez_name[i] <- countrycode(df$eez_name[i], origin = 'country.name', destination = 'iso3c')
}
# Rename country variable so it can be joined
df <- df %>%
rename(eez_iso3c = "eez_name")
# See how many countries were not matches
sum(is.na(df$eez_iso3c))
# Number of countries that properly got matched
length(unique(df$eez_iso3c))
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
# Only keep rows in preprocessed dataset that are unmatched countries
df_preprocessed <- df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
df_postprocessed <- df_preprocessed
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed$eez_name)) {
if (xor(str_detect(df_preprocessed$eez_name[i], "\\("), str_detect(df_preprocessed$eez_name[i], "Yemen"))) {
split_string <- str_split(df_preprocessed$eez_name[i], "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_postprocessed$eez_name[i] <- split_string[[1]][1]
}
else if (str_detect(df_preprocessed$eez_name[i], "Yemen")) {
df_postprocessed$eez_name[i] <- str_split(df_preprocessed$eez_name[i], "\\ \\(")[[1]][1]
}
}
# Convert previously unmatched countries to iso3c
for (i in 1:length(df$eez_name)) {
df_postprocessed$eez_name[i] <- countrycode(df_postprocessed$eez_name[i], origin = 'country.name', destination = 'iso3c')
}
# Rename country variable so it can be joined
df_postprocessed <- df_postprocessed %>%
rename(eez_iso3c = "eez_name")
# Add in unmatched countries (now all countries are matched)
df <- rbind(df, df_postprocessed)
# Read in cosnumption data
consumption <- read_parquet("../data/example_consumption_eez_2024_12_06.parquet")
consumption_all_years <- consumption
consumption <- consumption %>%
filter(year == 2019)
# Read in taxonomic data
sciname <- read.csv("../data/sciname.csv")
# Combine consumption and taxonomic data
consumption_sciname <- left_join(consumption, sciname, by = "sciname")
# Create phylogenetic variables
consumption_sciname <- taxa_level_vars(consumption_sciname)
consumption_sciname <- consumption_sciname %>%
exploreARTIS::add_region("consumer_iso3c", region.col.name = "region")
# Read in  Adaptive Capacity data
hdi <- read.csv("../data/hdi.csv")
hdi <- hdi %>%
rename(consumer_iso3c = "country") %>%
select(-date_obtained)
# Convert country names to iso3c codes
for (i in 1:length(hdi$consumer_iso3c)) {
hdi$consumer_iso3c[i] <- countryname(hdi$consumer_iso3c[i], destination = "iso3c")
}
# Variable names for consumption
names(consumption)
# Looking at total weights per country (aggregating species weight in 2019)
con_weight <- consumption %>%
filter(consumer_iso3c != producer_iso3c & str_detect(sciname, pattern = "\ ")) %>%
group_by(consumer_iso3c) %>%
mutate(live_weight_t = as.numeric(live_weight_t)) %>%
summarize(total_weight = sum(live_weight_t)) %>%
arrange(desc(total_weight))
# Shannon diversity of countries' imports
con_shannon <- consumption_sciname %>%
filter(consumer_iso3c != producer_iso3c & str_detect(sciname, pattern = "\ ")) %>%
group_by(consumer_iso3c, genus) %>%
summarize(genus_total = sum(live_weight_t)) %>%
group_by(consumer_iso3c) %>%
mutate(genus_total_country = sum(genus_total)) %>%
ungroup() %>%
mutate(pi = genus_total / genus_total_country, pi_lnpi = pi * log(pi)) %>%
group_by(consumer_iso3c) %>%
summarize(shannon = -sum(pi_lnpi))
# Join quantity and diversity
con_joined <- left_join(con_weight, con_shannon, by = "consumer_iso3c")
# Add in hdi values to joined dataset
con_joined <- left_join(con_joined, hdi, by = "consumer_iso3c")
# Store phylogenetic levels in a vector
levels <- c()
levels <- unique(consumption_sciname$taxa_level)
# Remove superclass (only 1 according to taxa_level variable) and species (different analysis to get prop)
levels <- levels[!(levels %in% c("superclass", "species", "phylum"))]
# Proportions of producing countries reporting to **at least** that taxonomic level (should be cumulative probabilities)
# Set up whether a producing country reported to at least a certain level (1 means it could also go lower (e.g., 1 in class means it could be just class or goes all the way to species))
consumption_sciname <- at_least_vars(consumption_sciname)
for (i in levels) {
con_actual_group <- consumption_sciname %>%
group_by(producer_iso3c) %>%
summarize(!!paste0("prop_at_least_", i) := sum(!!sym(paste0("at_least_",i))) / n()) %>%
rename(consumer_iso3c = "producer_iso3c")
# Join prop of each phylogenetic group to already joined consumption dataset
con_joined <-
left_join(con_joined, con_actual_group, by = "consumer_iso3c")
}
# Add back in species
levels <- c("species", "genus", "family", "order", "class")
# Proportions of producing countries reporting to exactly that taxonomic level.
for (i in levels) {
con_actual_group <- consumption_sciname %>%
group_by(producer_iso3c) %>%
summarize(!!paste0("prop_exactly_", i) := sum(taxa_level == i) / n(), .groups = "drop") %>%
rename(consumer_iso3c = "producer_iso3c")
# Join props of each phylogenetic group
con_joined <- left_join(con_joined, con_actual_group, by = "consumer_iso3c")
}
# Percentage of countries that report to species (no species column in sciname data - have to do different way from rest of taxonomic groups)
con_joined <- con_joined %>%
mutate(prop_at_least_species = prop_exactly_species)
# Update joined dataset to have log transformed total weight as a variable
con_joined <- con_joined %>%
mutate(log_weight = log(total_weight))
# Add in region (e.g., North America, Asia, etc.)
con_joined <- con_joined %>%
exploreARTIS::add_region("consumer_iso3c", region.col.name = "region")
# Consumption data without NA's (for correlation plots)
con_na_removed <- con_joined %>%
drop_na()
# Remove NA region
con_joined <- con_joined %>%
drop_na(region)
# Sort countries in alphabetical order
con_joined %>%
arrange(-desc(consumer_iso3c))
# Prints out number of unique values per phylogenetic group
for (i in c(19, 21, 22, 23)) {
print(c(length(unique(na.omit(consumption_sciname[[i]]))), names(consumption_sciname)[i]))
}
# Join consumption dataset to future climate data
consumption_sciname_future <- left_join(consumption_sciname, df, by = c("eez_iso3c", "sciname"))
length(unique(consumption_sciname$eez_iso3c))
length(unique(df$eez_iso3c))
mask <- unique(consumption_sciname$eez_iso3c) %in% unique(c(df$eez_iso3c))
unique(consumption_sciname$eez_iso3c)[!mask]
length(unique(consumption_sciname$family))
# separate question for whether trade overall increases or homogenizes diets (e.g., need marine capture / aquaculture)
# 503 families in total (all capture + aquaculture)
# Number of orders by country
consumption_sciname %>%
group_by(eez_iso3c) %>%
summarize(total_order = length(unique(order)))
# Modify sciname casing so that it can be joined to fishbase
consumption_sciname <- consumption_sciname %>%
mutate(sciname_joinable_to_fishbase = str_to_title(word(sciname_hs_modified, 1)),
sciname_joinable_to_fishbase2 = word(sciname_hs_modified, 2),
sciname_joinable_to_fishbase = ifelse(
is.na(sciname_joinable_to_fishbase2),
sciname_joinable_to_fishbase,
paste(sciname_joinable_to_fishbase, sciname_joinable_to_fishbase2))) %>%
select(-sciname_joinable_to_fishbase2) %>%
relocate(sciname_joinable_to_fishbase, .after = sciname)
# ***
# MAKING SURE ARTIS SCINAMES ALIGN WITH FISHBASE
# # of ARTIS unique ID's (includes higher taxonomic levels that aren't only species) - 2232 total IDs
length(unique(consumption_sciname$sciname_joinable_to_fishbase))
length(unique(consumption$sciname_hs_modified))
# # of ARTIS species (1780 species - shouldn't be more than Fishbase?)
sum(str_detect(unique(na.omit(consumption_sciname$sciname)), " "))
# 1326 species with sciname_hs_modified variable (This seems more right) - less than
sum(str_detect(unique(na.omit(consumption_sciname$sciname_hs_modified)), " "))
# Unique entries in Fishbase (i.e., # of ARTIS species successfully joined to fishbase - 1382 species)
artis_fishbase_locations <- faoareas(species_list = c(unique(consumption_sciname$sciname_joinable_to_fishbase)), server = "fishbase")
# Total number of joined species succesfully from ARTIS
length(unique(artis_fishbase_locations$Species))
sum(str_detect(unique(artis_fishbase_locations$Species), " "))
# ***
# Get unique taxonomic entries (no repeats)
unique_taxonomy_entries <- taxa_level_vars(consumption_sciname, ungroup = TRUE)
# Determines whether something is reported to **at least** a given taxonomic level
unique_taxonomy_entries <- at_least_vars(unique_taxonomy_entries)
# Add in species binary Yes or no
unique_taxonomy_entries <- unique_taxonomy_entries %>%
mutate(at_least_species = case_when(taxa_level == "species" ~ 1, TRUE ~ 0)) %>%
relocate(at_least_species, .before = at_least_genus)
# Count taxonomic totals
taxa_unreported_props <- data.frame()
taxa_unreported_quantity <- data.frame()
for (i in levels) {
amount <- unique_taxonomy_entries %>%
ungroup() %>%
summarize(sum = sum(!(!!sym(paste0("at_least_",i))))) %>%
pull(sum)
total <- length(unique_taxonomy_entries$sciname)
prop <- amount / total
taxa_unreported_props <- rbind(taxa_unreported_props, list(i, round(prop, 2)))
taxa_unreported_quantity <- rbind(taxa_unreported_quantity, list(i, total))
}
# Rename taxa_total variables
taxa_unreported_props <- taxa_unreported_props %>%
rename(taxa_level = "X.species.", prop = "X0.2")
taxa_unreported_quantity <- taxa_unreported_quantity %>%
rename(taxa_level = "X.species.", prop = "X2232L")
# Reports proportion and quantities that are not reported to a given taxonomic level.
print(taxa_unreported_props)
print(taxa_unreported_quantity)
# View joined artis / fishbase database
View(artis_fishbase_locations)
# METHOD 1: rfishbase::faoareas()
fishbase_presences_faoareas <- taxa_presence_or_absence_faoareas(data = "fishbase")
sealifebase_presences_faoareas <- taxa_presence_or_absence_faoareas(data = "sealifebase")
# Filter to only have sealifebase data (separate out sealifebase base using source variable)
only_sealifebase <- sealifebase_presences_faoareas %>%
filter(source == "sealifebase")
# Get indexes where sealifebase found presences or absences
sealifebase_presence_absences_indexes <- which(sealifebase_presences_faoareas$presence_or_absence %in% c(0,1))
# Select fishbase + unlinked NA data (excludes sealifebase)
fishbase_minus_sealifebase <- fishbase_presences_faoareas[-sealifebase_presence_absences_indexes,]
# Merce fishbase / sealifebase presence data - this will be the data that we use to interpolate higher taxonomic resolutions!
merged_presence_absence_data_faoareas <- rbind(fishbase_minus_sealifebase, only_sealifebase)
merged_presence_absence_data_faoareas %>%
count(presence_or_absence)
# METHOD 2: rfishbase::conutry()
# Obtain stats on fishbase/sealifebase data
taxa_presence_or_absence(data = "fishbase", obtain_stats = TRUE)
taxa_presence_or_absence(data = "sealifebase", obtain_stats = TRUE)
# Create presence/absence data
fishbase_presences_country <- taxa_presence_or_absence(data = "fishbase")
sealifebase_presences_country <- taxa_presence_or_absence(data = "sealifebase")
# Number of rows in ARTIS data (fishbase + sealifebase presence data)
fishbase_presences_country %>%
count(presence_or_absence) %>%
summarize(sum = sum(n)) %>%
pull(sum)
sealifebase_presences_country %>%
count(presence_or_absence) %>%
summarize(sum = sum(n)) %>%
pull(sum)
fishbase_presences_country %>%
filter(presence_or_absence %in% c(0,1))
# Check to see if fishbase and sealifebase have any overlapping species (they do not!)
any(sealifebase_presences_country$Species %in% artis_fishbase_locations$Species)
# Filter to only have sealifebase data (separate out sealifebase base using source variable)
only_sealifebase <- sealifebase_presences_country %>%
filter(source == "sealifebase")
# Get indexes where sealifebase found presences or absences
sealifebase_presence_absences_indexes <- which(sealifebase_presences_country$presence_or_absence %in% c(0,1))
# Select fishbase + unlinked NA data (excludes sealifebase)
fishbase_minus_sealifebase <- fishbase_presences_country[-sealifebase_presence_absences_indexes,]
# Merce fishbase / sealifebase presence data - this will be the data that we use to interpolate higher taxonomic resolutions!
# start using tidyverse functions (bind_rows)
merged_presence_absence_data_country <- bind_rows(fishbase_minus_sealifebase, only_sealifebase)
# # Double check that all NA values occuring in species are because they are not located in either fishbase or sealifebase 44 rows is correct!
# merged_presence_absence_data_country %>%
#   filter(str_detect(sciname_joinable_to_fishbase, " ") & is.na(presence_or_absence)) %>%
#   distinct(sciname_joinable_to_fishbase) %>%
#   summarize(length = n()) %>%
#   pull(length)
#
# # Number of excluded rows for *species* that weren't matched 13809 rows
# merged_presence_absence_data_country %>%
#   filter(str_detect(sciname_joinable_to_fishbase, " ") & is.na(presence_or_absence)) %>%
#   summarize(length = n()) %>%
#   pull(length)
#
# # See how many 0/1/NA there are in presences
# merged_presence_absence_data_country %>%
#   count(presence_or_absence)
#
# # Write merged presence/absence data to .parquet file
# write_parquet("../data/merged_presence_absence_data.parquet")
# View(fishbase_presences_country)
#
# merged_presence_absence_data_country %>%
#   group_by(eez_iso3c) %>%
#   mutate(presence_or_absence_all_taxa = case_when(
#     any(merged_presence_absence_data_country %>%
#         filter(eez_iso3c == first(eez_iso3c), genus == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(merged_presence_absence_data_country %>%
#         filter(eez_iso3c == first(eez_iso3c), subfamily == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(merged_presence_absence_data_country %>%
#         filter(eez_iso3c == first(eez_iso3c), family == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(merged_presence_absence_data_country %>%
#         filter(eez_iso3c == first(eez_iso3c), order == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(merged_presence_absence_data_country %>%
#         filter(eez_iso3c == first(eez_iso3c), class == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(merged_presence_absence_data_country %>%
#         filter(eez_iso3c == first(eez_iso3c), superclass == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(merged_presence_absence_data_country %>%
#         filter(eez_iso3c == first(eez_iso3c), phylum == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(merged_presence_absence_data_country %>%
#         filter(eez_iso3c == first(eez_iso3c), kingdom == sciname, !is.na(species))$presence_or_absence == 1)
#     ~ 1,
#     TRUE ~ 0
#   )) %>%
#   ungroup()
#
# merged_presence_absence_data_country %>%
#   group_by(eez_iso3c) %>%
#   mutate(presence_or_absence_all_taxa = case_when(
#     any(filter(merged_presence_absence_data_country, eez_iso3c == first(eez_iso3c), species == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(filter(merged_presence_absence_data_country, eez_iso3c == first(eez_iso3c), genus == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(filter(merged_presence_absence_data_country, eez_iso3c == first(eez_iso3c), subfamily == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(filter(merged_presence_absence_data_country, eez_iso3c == first(eez_iso3c), family == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(filter(merged_presence_absence_data_country, eez_iso3c == first(eez_iso3c), order == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(filter(merged_presence_absence_data_country, eez_iso3c == first(eez_iso3c), class == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(filter(merged_presence_absence_data_country, eez_iso3c == first(eez_iso3c), superclass == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(filter(merged_presence_absence_data_country, eez_iso3c == first(eez_iso3c), phylum == sciname, !is.na(species))$presence_or_absence == 1) |
#     any(filter(merged_presence_absence_data_country, eez_iso3c == first(eez_iso3c), kingdom == sciname, !is.na(species))$presence_or_absence == 1)
#     ~ 1,
#     TRUE ~ 0
#   )) %>%
#   ungroup()
#
#
# # column numbers: 20-25
#
#
# any(merged_presence_absence_data_country$sciname_hs_modified[1] == na.omit(merged_presence_absence_data_country$genus)) & presence_or_absence == 1
#
# # Tidyverse
#   (any(sciname == na.omit(merged_presence_absence_data_country$genus)) & presence_or_absence == 1) |
#   (any(sciname == na.omit(merged_presence_absence_data_country$subfamily)) & presence_or_absence == 1) |
#   (any(sciname == na.omit(merged_presence_absence_data_country$family)) & presence_or_absence == 1) |
#   (any(sciname == na.omit(merged_presence_absence_data_country$order)) & presence_or_absence == 1) |
#   (any(sciname == na.omit(merged_presence_absence_data_country$class)) & presence_or_absence == 1) |
#   (any(sciname == na.omit(merged_presence_absence_data_country$superclass)) & presence_or_absence == 1) |
#   (any(sciname == na.omit(merged_presence_absence_data_country$phylum)) & presence_or_absence == 1) |
#   (any(sciname == na.omit(merged_presence_absence_data_country$kingdom)) & presence_or_absence == 1)
#
#
# any(merged_presence_absence_data_country$sciname[1] == na.omit(merged_presence_absence_data_country$genus))
#
#
#
test_data <- merged_presence_absence_data_country[merged_presence_absence_data_country$eez_iso3c == "AGO",]
test_data <- test_data %>%
mutate(species = case_when(str_detect(sciname, " ") ~ sciname, TRUE ~ NA)) %>%
relocate(species, .before = genus)
merged_presence_absence_data_country
test_data
nrow(test_data)
1:nrow(test_data))
1:nrow(test_data)
test_data$presence_or_absence_all_taxa <- as.character()
test_data %>%
mutate(presence_or_absence_all_taxa = as.character())
test_data %>%
mutate(presence_or_absence_all_taxa = character(0))
test_data %>%
mutate(presence_or_absence_all_taxa = NA_character_)
presence_or_absence_all_taxa <- c()
test_data$sciname[1]
for (i in 1:nrow(test_data)) {
if (test_data$presence_or_absence == 1) {
dapply(c(test_data$sciname, test_data$species, test_data$genus, test_data$family, test_data$family), function(x) {
if(!str_detect(x[i], presence_or_absence_all_taxa)) {
presence_or_absence_all_taxa <- append(presence_or_absence_all_taxa, x[i])
}
})
}
}
presence_or_absence_all_taxa <- c()
for (i in 1:nrow(test_data)) {
if (test_data$presence_or_absence[i] == 1) {
dapply(c(test_data$sciname, test_data$species, test_data$genus, test_data$family, test_data$family), function(x) {
if(!str_detect(x[i], presence_or_absence_all_taxa)) {
presence_or_absence_all_taxa <- append(presence_or_absence_all_taxa, x[i])
}
})
}
}
test_data$presence_or_absence[i]
presence_or_absence
test_data$presence_or_absence
test_data %>%
mutate(presence_or_absence = replace_na(presence_or_absence, 0))
test_data %>%
mutate(presence_or_absence = replace_na(presence_or_absence, 0)) %>%
count(presence_or_absence)
# Replace NA presence/absence values with 0's so loop can run
test_data <- test_data %>%
mutate(presence_or_absence = replace_na(presence_or_absence, 0))
presence_or_absence_all_taxa <- c()
for (i in 1:nrow(test_data)) {
if (test_data$presence_or_absence[i] == 1) {
dapply(c(test_data$sciname, test_data$species, test_data$genus, test_data$family, test_data$order), function(x) {
if(!str_detect(x[i], presence_or_absence_all_taxa)) {
presence_or_absence_all_taxa <- append(presence_or_absence_all_taxa, x[i])
}
})
}
}
?dapply()
?lapply()
for (i in 1:nrow(test_data)) {
if (test_data$presence_or_absence[i] == 1) {
lapply(c(test_data$sciname, test_data$species, test_data$genus, test_data$family, test_data$order), function(x) {
if(!str_detect(x[i], presence_or_absence_all_taxa)) {
presence_or_absence_all_taxa <- append(presence_or_absence_all_taxa, x[i])
}
})
}
}
lapply(c(test_data$sciname, test_data$species, test_data$genus, test_data$family, test_data$order), "hi")
test_data
test_data[,c(7,20,21,23,24,25)]
c(test_data$sciname, test_data$species, test_data$genus, test_data$family, test_data$order)
for (i in 1:nrow(test_data)) {
if (test_data$presence_or_absence[i] == 1) {
lapply(test_data[,c(7,20,21,23,24,25)], function(x) {
if(!str_detect(x[i], presence_or_absence_all_taxa)) {
presence_or_absence_all_taxa <- append(presence_or_absence_all_taxa, x[i])
}
})
}
}
for (i in 1:nrow(test_data)) {
for (i in 1:nrow(test_data)) {
for (i in 1:nrow(test_data)) {
if (test_data$presence_or_absence[i] == 1) {
lapply(test_data[,c(7,20,21,23,24,25)], function(x) {
if(!x[i] %in% presence_or_absence_all_taxa) {
presence_or_absence_all_taxa <- append(presence_or_absence_all_taxa, x[i])
}
})
}
}
presence_or_absence_all_taxa
presence_or_absence_all_taxa
5*5
if (test_data$presence_or_absence[i] == 1) {
# Data Visualization + Analysis
c
lapply(test_data[,c(7,20,21,23,24,25)], function(x) {
if(!x[i] %in% presence_or_absence_all_taxa) {
presence_or_absence_all_taxa <- append(presence_or_absence_all_taxa, x[i])
}
})
}
if (test_data$presence_or_absence[i] == 1) {
lapply(test_data[,c(7,20,21,23,24,25)], function(x) {
if(!x[i] %in% presence_or_absence_all_taxa) {
presence_or_absence_all_taxa <- append(presence_or_absence_all_taxa, x[i])
}
})
}
lapply(c(test_data$sciname, test_data$species, test_data$genus, test_data$family, test_data$order), "hi")
5*5
5*5
5*5
5*5
