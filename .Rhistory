unmatched_countries
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
unmatched_countries
unmatched_countries
split_string[[1]][1]
# See which countries weren't properly matched
for (i in seq_along(unmatched_countries)) {
j <- unmatched_countries[i]
split_string <- str_split(j, "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
unmatched_countries[j] <- split_string[[1]][1]
}
unmatched_countries
c(unmatched_countries)
# See which countries weren't properly matched
for (i in seq_along(unmatched_countries)) {
j <- unmatched_countries[i]
split_string <- str_split(j, "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
unmatched_countries[j] <- split_string[[1]][1]
}
unmatched_countries
split_string[[1]][1]
j
seq_along(unmatched_countries)
unmatched_countries
unmatched_countries[i]
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
unmatched_countries
unmatched_countries[i]
i
unmatched_countries
seq_along(unmatched_countries)
# See which countries weren't properly matched
for (i in seq_along(unmatched_countries)) {
j <- unmatched_countries[i]
split_string <- str_split(j, "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
unmatched_countries[i] <- split_string[[1]][1]
}
unmatched_countries
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
# See which countries weren't properly matched
for (i in seq_along(unmatched_countries)) {
j <- unmatched_countries[i]
if (str_detect(j, "\\(")) {
split_string <- str_split(j, "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
unmatched_countries[i] <- split_string[[1]][1]
}
}
unmatched_countries
df
unmatched_countries
df_preprocessed
unmatched_countries
df_preprocessed
df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))]
df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
filter(eez_name %in% unmatched_countries, by = "eez_name")
right_join(df, df_preprocessed %>%
right_join(df, df_preprocessed %>%
right_join(df, df_preprocessed %>%
filter(eez_name %in% unmatched_countries, by = "eez_name"))
right_join(df, df_preprocessed %>%
df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
df_preprocessed
# Only keep rows in preprocessed dataset that are unmatched countries
df_preprocessed <- df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
df_preprocessed
df
df
# Only keep rows in preprocessed dataset that are unmatched countries
df_preprocessed <- df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
unmatched_countries
df$eez_name
df_preprocessed
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed)) {
j <- df_preprocessed[i]
if (str_detect(j, "\\(")) {
split_string <- str_split(j, "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_preprocessed$eez_name[i] <- split_string[[1]][1]
}
}
df_preprocessed
df_preprocessed$eez_name[i] <- split_string[[1]][1]
df_preprocessed$eez_name
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
df_preprocessed
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
# Only keep rows in preprocessed dataset that are unmatched countries
df_preprocessed <- df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
unmatched_countries
unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
df
View(df_preprocessed)
---
title: "Seafood Analysis"
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
df_preprocessed
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
df
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
# Rename country variable so it can be joined
df <- df %>%
rename(eez_iso3c = "eez_name")
# See how many countries were not matches
sum(is.na(df$eez_iso3c))
# Number of countries that properly got matched
length(unique(df$eez_iso3c))
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
unmatched_countries
# initiate empty df
df <- data.frame()
for (i in 1:length(file_names)) {
# Read in i'th species file in loop
df_i <- fread(file_names[i])
# rename species variable to taxon_key to a join can work
df_i <- df_i %>%
rename(taxon_key = "species")
df_i <- left_join(df_i, species_names, by = "taxon_key")
# Select only certain variables for certain years and pivot wider
df_i <- df_i %>%
filter(year %in% c(2030, 2050, 2100)) %>%
mutate(year_ssp = paste0(year, ssp), sciname = tolower(paste(genus, species))) %>%
select(sciname, eez_name, year_ssp, mean_per_change) %>%
pivot_wider(names_from = year_ssp, values_from = mean_per_change)
# Combine all species observations into one file
df <- df %>%
bind_rows(df_i)
}
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
# Convert eez variable countries to iso3c codes
for (i in 1:length(df$eez_name)) {
df$eez_name[i] <- countrycode(df$eez_name[i], origin = 'country.name', destination = 'iso3c')
}
# Rename country variable so it can be joined
df <- df %>%
rename(eez_iso3c = "eez_name")
# See how many countries were not matches
sum(is.na(df$eez_iso3c))
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
unmatched_countries
# Only keep rows in preprocessed dataset that are unmatched countries
df_preprocessed <- df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed)) {
j <- df_preprocessed[i]
if (str_detect(j, "\\(")) {
split_string <- str_split(j, "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_preprocessed$eez_name[i] <- split_string[[1]][1]
}
}
df_preprocessed
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
# Only keep rows in preprocessed dataset that are unmatched countries
df_preprocessed <- df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
unmatched_countries
for (i in 1:length(file_names)) {
# Read in i'th species file in loop
df_i <- fread(file_names[i])
# rename species variable to taxon_key to a join can work
df_i <- df_i %>%
rename(taxon_key = "species")
df_i <- left_join(df_i, species_names, by = "taxon_key")
# Select only certain variables for certain years and pivot wider
df_i <- df_i %>%
filter(year %in% c(2030, 2050, 2100)) %>%
mutate(year_ssp = paste0(year, ssp), sciname = tolower(paste(genus, species))) %>%
select(sciname, eez_name, year_ssp, mean_per_change) %>%
pivot_wider(names_from = year_ssp, values_from = mean_per_change)
# Combine all species observations into one file
df <- df %>%
bind_rows(df_i)
}
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
# Convert eez variable countries to iso3c codes
for (i in 1:length(df$eez_name)) {
df$eez_name[i] <- countrycode(df$eez_name[i], origin = 'country.name', destination = 'iso3c')
}
# Rename country variable so it can be joined
df <- df %>%
rename(eez_iso3c = "eez_name")
# initiate empty df
df <- data.frame()
for (i in 1:length(file_names)) {
# Read in i'th species file in loop
df_i <- fread(file_names[i])
# rename species variable to taxon_key to a join can work
df_i <- df_i %>%
rename(taxon_key = "species")
df_i <- left_join(df_i, species_names, by = "taxon_key")
# Select only certain variables for certain years and pivot wider
df_i <- df_i %>%
filter(year %in% c(2030, 2050, 2100)) %>%
mutate(year_ssp = paste0(year, ssp), sciname = tolower(paste(genus, species))) %>%
select(sciname, eez_name, year_ssp, mean_per_change) %>%
pivot_wider(names_from = year_ssp, values_from = mean_per_change)
# Combine all species observations into one file
df <- df %>%
bind_rows(df_i)
}
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
# Convert eez variable countries to iso3c codes
for (i in 1:length(df$eez_name)) {
df$eez_name[i] <- countrycode(df$eez_name[i], origin = 'country.name', destination = 'iso3c')
}
# Rename country variable so it can be joined
df <- df %>%
rename(eez_iso3c = "eez_name")
# See how many countries were not matches
sum(is.na(df$eez_iso3c))
# Number of countries that properly got matched
length(unique(df$eez_iso3c))
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
# Only keep rows in preprocessed dataset that are unmatched countries
df_preprocessed <- df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
unmatched_countries
df_preprocessed
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed)) {
j <- df_preprocessed$eez_name[i]
if (str_detect(j, "\\(")) {
split_string <- str_split(j, "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_preprocessed$eez_name[i] <- split_string[[1]][1]
}
}
df_preprocessed
df_preprocessed
df_postprocessed <- df_preprocessed
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
# Get list of files for future projections on EACH species
file_names <- list.files(path = "../data/species/", pattern = "\\.csv", full.names = TRUE)
# Obtain species lookup key (will be used in loop join)
species_names <- fread("../data/dbem_spp_list.csv")
# initiate empty df
df <- data.frame()
for (i in 1:length(file_names)) {
# Read in i'th species file in loop
df_i <- fread(file_names[i])
# rename species variable to taxon_key to a join can work
df_i <- df_i %>%
rename(taxon_key = "species")
df_i <- left_join(df_i, species_names, by = "taxon_key")
# Select only certain variables for certain years and pivot wider
df_i <- df_i %>%
filter(year %in% c(2030, 2050, 2100)) %>%
mutate(year_ssp = paste0(year, ssp), sciname = tolower(paste(genus, species))) %>%
select(sciname, eez_name, year_ssp, mean_per_change) %>%
pivot_wider(names_from = year_ssp, values_from = mean_per_change)
# Combine all species observations into one file
df <- df %>%
bind_rows(df_i)
}
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
# Convert eez variable countries to iso3c codes
for (i in 1:length(df$eez_name)) {
df$eez_name[i] <- countrycode(df$eez_name[i], origin = 'country.name', destination = 'iso3c')
}
# Rename country variable so it can be joined
df <- df %>%
rename(eez_iso3c = "eez_name")
# See how many countries were not matches
sum(is.na(df$eez_iso3c))
# Number of countries that properly got matched
length(unique(df$eez_iso3c))
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
# Only keep rows in preprocessed dataset that are unmatched countries
df_preprocessed <- df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
df_postprocessed <- df_preprocessed
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed)) {
j <- df_preprocessed$eez_name[i]
if (str_detect(j, "\\(")) {
split_string <- str_split(j, "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_postprocessed$eez_name[i] <- split_string[[1]][1]
}
}
right_join(df, )
df_postprocessed
df_preprocessed
df_postprocessed
str_detect("France()", "\\(")
str_detect("France", "\\(")
# Get list of files for future projections on EACH species
file_names <- list.files(path = "../data/species/", pattern = "\\.csv", full.names = TRUE)
# Obtain species lookup key (will be used in loop join)
species_names <- fread("../data/dbem_spp_list.csv")
# initiate empty df
df <- data.frame()
for (i in 1:length(file_names)) {
# Read in i'th species file in loop
df_i <- fread(file_names[i])
# rename species variable to taxon_key to a join can work
df_i <- df_i %>%
rename(taxon_key = "species")
df_i <- left_join(df_i, species_names, by = "taxon_key")
# Select only certain variables for certain years and pivot wider
df_i <- df_i %>%
filter(year %in% c(2030, 2050, 2100)) %>%
mutate(year_ssp = paste0(year, ssp), sciname = tolower(paste(genus, species))) %>%
select(sciname, eez_name, year_ssp, mean_per_change) %>%
pivot_wider(names_from = year_ssp, values_from = mean_per_change)
# Combine all species observations into one file
df <- df %>%
bind_rows(df_i)
}
# Obtain previous state on dataframe (to get unmatched)
df_preprocessed <- df
# Convert eez variable countries to iso3c codes
for (i in 1:length(df$eez_name)) {
df$eez_name[i] <- countrycode(df$eez_name[i], origin = 'country.name', destination = 'iso3c')
}
# Rename country variable so it can be joined
df <- df %>%
rename(eez_iso3c = "eez_name")
# See how many countries were not matches
sum(is.na(df$eez_iso3c))
# Number of countries that properly got matched
length(unique(df$eez_iso3c))
# Unmatched countries via countrycode
unmatched_countries <- unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
# Only keep rows in preprocessed dataset that are unmatched countries
df_preprocessed <- df_preprocessed %>%
filter(eez_name %in% unmatched_countries)
df_postprocessed <- df_preprocessed
# Get country names out of parenthesis with string detects
for (i in length(df_preprocessed$eez_name)) {
if (str_detect(df_preprocessed$eez_name[i], "\\(")) {
split_string <- str_split(df_preprocessed$eez_name[i], "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_postprocessed$eez_name[i] <- split_string[[1]][1]
}
}
df_postprocessed
df_preprocessed$eez_name[i]
i
df_postprocessed
df_preprocessed$eez_name[i]
df_postprocessed
df_preprocessed
str_detec(W"allis & Futuna Isl. (France)", "\\(")
str_detect(W"allis & Futuna Isl. (France)", "\\(")
str_detect("allis & Futuna Isl. (France)", "\\(")
# Get country names out of parenthesis with string detects
for (i in length(df_preprocessed$eez_name)) {
if (str_detect(df_preprocessed$eez_name[i], "\\(")) {
split_string <- str_split(df_preprocessed$eez_name[i], "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_postprocessed$eez_name[i] <- split_string[[1]][1]
}
}
View(df_postprocessed)
df_postprocessed
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed$eez_name)) {
if (str_detect(df_preprocessed$eez_name[i], "\\(")) {
split_string <- str_split(df_preprocessed$eez_name[i], "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_postprocessed$eez_name[i] <- split_string[[1]][1]
}
}
View(df_postprocessed)
df_postprocessed
str_detect(df_preprocessed$eez_name[i], "\\(") xor str_detect(df_preprocessed$eez_name[i], "France")
xor(str_detect(df_preprocessed$eez_name[i], "\\("),str_detect(df_preprocessed$eez_name[i], "France"))
df_preprocessed
df_preprocessed
df_postprocessed
View(df_postprocessed)
str_split("Yemen (Arabian Sea)", "Yemen")
str_split("Yemen (Arabian Sea)", "(")
str_split("Yemen (Arabian Sea)", "\\(")
str_split("Yemen (Arabian Sea)", "\\(")[[1]][1]
str_split("Yemen (Arabian Sea)", " (")[[1]][1]
str_split("Yemen (Arabian Sea)", "\\ (")[[1]][1]
str_split("Yemen (Arabian Sea)", "\\(")[[1]][1]
str_split("Yemen (Arabian Sea)", "\\ (")[[1]][1]
str_split("Yemen (Arabian Sea)", "\\ \\(")[[1]][1]
df_postprocessed <- df_preprocessed
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed$eez_name)) {
if (xor(str_detect(df_preprocessed$eez_name[i], "\\("),str_detect(df_preprocessed$eez_name[i], "Yemen"))) {
split_string <- str_split(df_preprocessed$eez_name[i], "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_postprocessed$eez_name[i] <- split_string[[1]][1]
}
else if (str_detect(df_preprocessed$eez_name[i], "Yemen")) {
df_postprocessed <- $eez_name[i]str_split("Yemen (Arabian Sea)", "\\ \\(")[[1]][1]
df_postprocessed <- df_preprocessed
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed$eez_name)) {
if (xor(str_detect(df_preprocessed$eez_name[i], "\\("),str_detect(df_preprocessed$eez_name[i], "Yemen"))) {
split_string <- str_split(df_preprocessed$eez_name[i], "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_postprocessed$eez_name[i] <- split_string[[1]][1]
}
else if (str_detect(df_preprocessed$eez_name[i], "Yemen")) {
df_postprocessed <- df_preprocessed$eez_name[i]str_split("Yemen (Arabian Sea)", "\\ \\(")[[1]][1]
df_postprocessed
df_postprocessed <- df_preprocessed
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed$eez_name)) {
if (xor(str_detect(df_preprocessed$eez_name[i], "\\("),str_detect(df_preprocessed$eez_name[i], "Yemen"))) {
split_string <- str_split(df_preprocessed$eez_name[i], "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_postprocessed$eez_name[i] <- split_string[[1]][1]
}
else if (str_detect(df_preprocessed$eez_name[i], "Yemen")) {
df_postprocessed <- str_split(df_preprocessed$eez_name[i], "\\ \\(")[[1]][1]
}
}
df_postprocessed <- df_preprocessed
# Get country names out of parenthesis with string detects
for (i in seq_along(df_preprocessed$eez_name)) {
if (xor(str_detect(df_preprocessed$eez_name[i], "\\("),str_detect(df_preprocessed$eez_name[i], "Yemen"))) {
split_string <- str_split(df_preprocessed$eez_name[i], "\\(")
split_string <- str_split(split_string[[1]][2], "\\)")
df_postprocessed$eez_name[i] <- split_string[[1]][1]
}
else if (str_detect(df_preprocessed$eez_name[i], "Yemen")) {
df_postprocessed$eez_name[i] <- str_split(df_preprocessed$eez_name[i], "\\ \\(")[[1]][1]
}
}
df_postprocessed
df_postprocessed
for (i in 1:length(df$eez_name)) {
df_postprocessed$eez_name[i] <- countrycode(df_postprocessed$eez_name[i], origin = 'country.name', destination = 'iso3c')
}
df_postprocessed
# Rename country variable so it can be joined
df_postprocessed <- df_postprocessed %>%
rename(eez_iso3c = "eez_name")
rbind(df, df_postprocessed)
df
df_postprocessed
rbind(df, df_postprocessed)
unique(df_preprocessed$eez_name[c(which(is.na(df$eez_iso3c)))])
df <- rbind(df, df_postprocessed)
df_postprocessed
df
length(unique(df$eez_iso3c))
mask
unique(consumption_sciname$eez_iso3c)[!mask]
length(unique(consumption_sciname$eez_iso3c))
length(unique(df$eez_iso3c))
consumption_sciname
# Join consumption dataset to future climate data
consumption_sciname_future <- left_join(consumption_sciname, df, by = c("eez_iso3c", "sciname"))
consumption_sciname_future
# Future climate projections visualization
(ssp_projections <- consumption_sciname_future %>%
filter(year == 2019 & !is.na(`2100ssp585`)) %>%
pivot_longer(c(`2030ssp126`, `2030ssp585`, `2050ssp126`, `2050ssp585`,`2100ssp126`, `2100ssp585`),names_to = "ssp", values_to = "percent_change_catch") %>%
mutate(year = as.numeric(map_chr(str_split(ssp, "ssp"), 1)),
scenario = map_chr(str_split(ssp, "ssp"), 2)) %>%
select(region, year, scenario, percent_change_catch) %>%
group_by(region, year, scenario) %>%
drop_na() %>%
summarize(mean_change = mean(percent_change_catch)) %>%
ggplot(aes(x = year, y = mean_change, color = scenario)) +
geom_point(size = 1.3) +
geom_line(size = 1.1) +
facet_wrap(~ region) +
scale_color_manual(values = artis_palette(2)) +
theme_light() +
labs(x = "Year", color = "SSP", y = "Mean change to annual catch potential\n(Aggregated across countries + species)"))
